<?php

// $Id$

/**
 * This file is part of Timescape developed by Wolf Maul for Semandra Inc. 
 * 2014-15 - http://semandra.com.
 * 
 * Timescape is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Timescape is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Timescape.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * Initialize the Timescape, timeline interface.
 *
 * This function loads external resources that are used by the Timescape 
 * module. Mainly it lods the module specific css-files and the Timeline 
 * rendering javascript from Simile.
*/
function Timescape_init() {
  include_once(drupal_get_path('module', 'Timescape') . '/Timescape.inc');
  
  $options = array (
  	'type' => 'external',
	'every_page' => false
  );
  
  
//TODO -- Only load this javascript and css if on the timeline page??

  // Load Timeline 2.3.0 javascripts
  // Excplicitly load the ajax api to avoid load on the timeline server
  drupal_add_js('Timeline_ajax_url="' . drupal_get_path('module', 'Timescape') . '/timeline_2.3.0/timeline_ajax/simile-ajax-api.js";
                 Timeline_urlPrefix="' . drupal_get_path('module', 'Timescape') . '/timeline_2.3.0/timeline_js/";       
                 Timeline_parameters="bundle=true";', 
                array('type' => 'inline',));
 // drupal_add_js(drupal_get_path('module', 'Timescape') . '/timeline_2.3.0/timeline_js/timeline-api.js');
 
 drupal_add_js(drupal_get_path('module', 'Timescape') . '/js/timeline-api-cust.js'); //Semandra -- cut out ajax loading of css for customization
 drupal_add_css(drupal_get_path('module', 'Timescape') . '/timeline_2.3.0/timeline_js/timeline-bundle.css'); //load simile css through Drupal
 drupal_add_css(drupal_get_path('module', 'Timescape') . '/css/timescape-timeline.css'); //load customizations for timeline
 drupal_add_css('http://localhost:8888/testDrupal/timescape/css', $options); // TODO - Is this the best way to do this?
 //drupal_add_css(drupal_get_path('module', 'Timescape') . '/css/test.css'); 
 
  // Load datetimepicker functions and css for the input form
  //drupal_add_js(drupal_get_path('module', 'Timescape') . '/anytime/anytimec.js');
  //drupal_add_css(drupal_get_path('module', 'Timescape') . '/anytime/anytimec.css');
  // Load the MultiFile upload scripts
  //drupal_add_js(drupal_get_path('module', 'Timescape') . '/MultiFile/jquery.MultiFile.js');
  // Load the specific timeline we want to use.
  drupal_add_js(drupal_get_path('module', 'Timescape') . '/js/timescape-theme.js');
  drupal_add_js(drupal_get_path('module', 'Timescape') . '/js/timescape-original-painter.js');
  drupal_add_js(drupal_get_path('module', 'Timescape') . '/js/simile-patch.js');
 // drupal_add_css(drupal_get_path('module', 'Timescape') . '/Timescape.css');
  drupal_add_js(drupal_get_path('module', 'Timescape') . '/js/timescape.js');
  // Load http://momentjs.com/ to easily format dates
  drupal_add_js(drupal_get_path('module', 'Timescape') . '/moment.js'); // Assists with date formatting 
  // Initialize the timeline javascript with another javascript function
  drupal_add_js(Timescape_jQuery(), 'inline'); // Adds execution code for on document load + setup/customization variables from admin
  
  //drupal_add_css(Timescape_customCss(), 'inline');
}

/** 
 * Generates a user help page. 
 *
 * Creates a help page for the Timescape module. Explains configuration, usage 
 * and some tips and tricks on what can be done.
 *
 * @param string $path
 *   The router menu path, as defined in Timescape_menu().
 * @param array $arg
 *   An array that corresponds to the return value of the arg() function, for 
 *   modules that want to provide help that is specific to certain values of 
 *   wildcards in $path. For example, you could provide help for the path 
 *   'user/1' by looking for the path 'user/%' and $arg[1] == '1'. This array 
 *   should always be used rather than directly invoking arg(), because your 
 *   hook implementation may be called for other purposes besides building the 
 *   current page's help. Note that depending on which module is invoking 
 *   hook_help, $arg may contain only empty strings. Regardless, $arg[0] to 
 *   $arg[11] will always be set.
 *   
 * @return string
 *   A localized string containing the help text.
*/

/*Currently not working - renders help text on all pages of site, in all views*/

function Timescape_help($path, $arg){
  
/*  $help_output = '<p>' . t("Displays events on a timeline.") . '</p>';
  return $help_output;*/

}

/**
 * Handles module permissions.
 *
 * Defines the permissions that are used by the Timescape module. The 
 * permissions are: 
 * - "access Timescape": Access the timeline and see open information.
 * - "access Timescape private": Private information is intended for 
 *   Authorized Users. If there is no sensitive information on your timeline
 *   disregard this permission.
 * - "administer Timescape": Allows users to administer the Timescape module.
 *
 * @return array 
 *   An array of permission strings. The strings must not be wrapped with the 
 *   t() function, since the string extractor takes care of extracting 
 *   permission names defined in the perm hook for translation.
*/
function Timescape_permission(){
  return array('administer Timescape' => array(
                 'title' => t('Administer Timescape'),
                 'description' => t('Allows a user to administer the timeline 
                                     and general settings of the Timescape 
                                     module.'),
               ),
               'access Timescape' => array(
                 'title' => t('Access Timescape'),
                 'description' => t('Allows users to view the timeline and 
                                     access open information.'),
               ), 
               'edit Timescape' => array(
                 'title' => t('Edit Timescape'),
                 'description' => t('With this permissions a user can add and
                                     remove non-static things from the 
                                     timeline.'),
               ),
              );
}

/**
 * Creates the administration form for the Timescape module.
 *
 * Creates the administration form for the Timescape module, the form can be 
 * found at /admin/settings/Timescape as defined in Timescape_menu.
 *
 * @return array $form
 *   A drupal form formatted by system_settings_form().
*/
function Timescape_admin($form, &$form_state){
  	$i = 0;
	// Manage timeline categories (display view)
	$ts_categories = array();
	$ts_categoriesList = "<ul>";
	$results = db_select('timescape_event','t')
											 ->distinct()
                       ->fields('t', array('category'))
                       ->execute();
	while ($result = $results->fetchAssoc()) {
		$ts_categories[$result['category']] = $result['category'];
		$ts_categoriesList .= "<li>" . $result['category'] . "</li>";
	}
	$ts_categories['other'] = 'Other';
  	$ts_categoriesList .= "<ul>";
	
	variable_set('ts_categories', $ts_categories);
  
  $form = array(
 //   '#type' => 'fieldset',  //Semandra --- tried this but didn't work
  //  '#title' => t('Name'),   //Semandra
  );
  // ------------ Data Group ----------------
  $form['ts_data_group'] = array(
    '#type' => 'fieldset',
    '#title' => t('Timeline Data'),
	 '#collapsible' => TRUE,
	 '#collapsed' => TRUE,
  );  
  $form['ts_data_group']['data_source_type'] = array(
    '#type' => 'radios',
    '#title' => t('Data Type!'),
    '#options' => array(
      'drupal' => t('Drupal content type (default)'),
      'json' => t('Uploaded file (JSON)'),
    ),
    '#default_value' => variable_get('data_source_type', 'drupal'),
  );
  $form['ts_data_group']['ts_linked_file_path'] = array(
    '#type' => 'textfield',
    '#title' => t('URL link to JSON file'),
	'#description' => t('Optional. Note: Entries will not be editable from the timeline. See <a href="#">JSON format</a>'),
    '#default_value' => variable_get('ts_linked_file_path', ''),
  );
/*  $form['ts_categories'] = array(
    '#type' => 'select',
    '#title' => t('Timeline Categories'),
	'#default_value' => variable_get('ts_categories', ''),
  );*/
/*  $form['category'] = 
    array('#type' => 'select',
    '#id' => 'timescape_category',
    '#title' => t('Category'),
    '#options' => $categories,
    '#description' => t("Categories for Events."),
    '#required' => FALSE,
    '#default_value' => $values['category'],
    );*/
  $form['ts_data_group']['category_other'] = 
    array('#type' => 'textfield',
	'#title' => t('Event Categories'),
    '#prefix' => '<div id="timescape_other">',
	'#field_prefix' =>  $ts_categoriesList,
    '#suffix' => '</div>',
    '#size' => 30,
    '#maxlength' => 50,
	'#required' => FALSE,
    '#description' => t("Create new category"),
    //'#default_value' => $values['category']
    );
  
  // ----- Timeline Settings Group ----------
  $form['ts_settings_group'] = array(
    '#type' => 'fieldset',
    '#title' => t('Timeline Settings'),
	 '#collapsible' => TRUE,
	 '#collapsed' => TRUE,
  ); 
  
  $form['ts_settings_group']['ts_center_year'] = array(
    '#type' => 'textfield',
	'#size' => '10',
    '#title' => t('Center timeline on year (Format: YYYY) '),
	'#default_value' => variable_get('ts_center_year', ''),
  );
  
  // ----- Bubble Group ----------
  $form['ts_bubble_group'] = array(
    '#type' => 'fieldset',
    '#title' => t('Bubble Display'),
	 '#collapsible' => TRUE,
	 '#collapsed' => TRUE,
  );  
  
  // TODO --- Show Title?
  
  // TODO -- Show Category?
  
  
  $form['ts_bubble_group']['ts_show_all_dates'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display full dates '),
	'#default_value' => variable_get('ts_show_all_dates', true),
  );
  $form['ts_bubble_group']['ts_date_format'] = array(
    '#type' => 'radios',
    '#title' => t('Dateformat '),
	'#options' => array(
		'MDY' => t('Month Day, Year (e.g. May 3rd, 2015)'),
		'ymd' => t('Year-Month-Day (e.g. 2011-08-05)'),
		'dmy' => t('Day/Month/Year (e.g. 04/09/2010)'),
		),
	'#default_value' => variable_get('ts_date_format', true),
  );
  
  $form['ts_bubble_group']['ts_event_date_summary'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show date summary line'),
	'#default_value' => variable_get('ts_event_date_summary', false),
  );
  
  // ----- Timeline Style Group ----------
  $form['ts_style_group'] = array(
    '#type' => 'fieldset',
    '#title' => t('Timeline Styles'),
	 '#collapsible' => TRUE,
	 '#collapsed' => FALSE,
  ); 
  $form['ts_style_group']['ts_tape_height'] = array(
    '#type' => 'textfield',
	'#size' => '10',
    '#title' => t('Tape and Dot Height in pixels (e.g. "10") '),
	'#default_value' => variable_get('ts_tape_height', '8'),
  );
    $form['ts_style_group']['ts_timeline_border'] = array(
    '#type' => 'textfield',
	'#size' => '20',
    '#title' => t('Styles for Timeline Border (e.g. 1px solid #ff0000) '),
	'#default_value' => variable_get('ts_timeline_border', ''),
  );
	$form['ts_style_group']['ts_timeline_event_colors'] = array(
    '#type' => 'textfield',
	'#size' => '20',
    '#title' => t('Colour test for styles (e.g. #ff0000) '),
	'#default_value' => variable_get('ts_timeline_event_colors', 'green'),
  );
	
	// =============== MULTIPLE SELECTION FIELD =====================
/*		  $form_state['storage']['participants'] =
			isset($form_state['storage']['participants']) ? $form_state['storage']['participants'] : 0;
		
		  $form['name'] = array(
			'#title' => t('Name'),
			'#type' => 'textfield',
		  );
		
		  $form['participants'] = array(
			'#type' => 'container',
			'#tree' => TRUE,
			'#prefix' => '<div id="participants">',
			'#suffix' => '</div>',
		  );
			
		  if ($form_state['storage']['participants']) {
			for ($i = 1; $i <= $form_state['storage']['participants']; $i++) {
			  $form['participants'][$i] = array(
				'#type' => 'fieldset',
				'#tree' => TRUE,
			  );
		
			  $form['participants'][$i]['name'] = array(
				'#title' => t('Name'),
				'#type' => 'textfield',
			  );
			}
		  }
		
		  $form['add_participant'] = array(
			'#type' => 'button',
			'#value' => t('Add'),
			'#href' => '',
			'#ajax' => array(
			'callback' => 'custom_registration_ajax_add_participant',
			'wrapper' => 'participants',
		   ),
		  );
		
		  $form_state['storage']['participants']++;*/
		  
		$form['ts_style_group']['ts_evt_style_table'] = array(
			'#type' => 'fieldset',
			'#title' => t('Event Tape Styles'),
			'#prefix' => '<table><tr><th>Category Name</th><th>Primary Colour</th><th></th><th>Secondary Colour</th><th></th></tr>',
			'#suffix' => '</table>',
			 '#collapsible' => FALSE,
			 '#collapsed' => FALSE,
		  ); 
	
		foreach ($ts_categories as $ts_category){
			$form['ts_style_group']['ts_evt_style_table']['ts_color_p_' . $ts_category] = array(
			//$form['ts_style_group']['ts_evt_style_table'][$i]['ts_color_p'] = array(
			//'#title' => t($category),
			'#prefix' => '<tr><td>' . $ts_category . "</td><td>",
			'#suffix' => '</td><td><div style="height:20px;width:20px;background-color:'. variable_get('ts_color_p_' . $ts_category, '') .'"></div></td>',
			//'#suffix' => '</td><td><div style="height:20px;width:20px;background-color:'. variable_get('ts_color_p') .'"></div></td>',
			'#type' => 'textfield',
			'#size' => '20',
			'#default_value' => variable_get('ts_color_p_' . $ts_category, '#205092'),
			//'#default_value' => variable_get('ts_color_p', ''),
		  );
		  $form['ts_style_group']['ts_evt_style_table']['ts_color_s_' . $ts_category] = array(
			//'#title' => t($category),
			'#prefix' => '<td>',
			'#suffix' => '</td><td><div style="height:20px;width:20px;background-color:'. variable_get('ts_color_s_' . $ts_category, '') .'"></div></td>',
			'#type' => 'textfield',
			'#size' => '20',
			'#default_value' => variable_get('ts_color_s_' . $ts_category, '#A1C0EA'),
		  );
		  $i++;
		}
	
	
	return system_settings_form($form);
}

function custom_registration_ajax_add_participant($form, $form_state) {
  return $form['participants'];
}

/**
 * Creates the Timescape paths and menu items.
 *
 * Defines paths to Timescape pages and defines Timescape menu items. The 
 * items that are defined are:
 * - admin/config/content/timescape: This is the administration page
 * - /timescape: This is the XML-generation hook
 * - /timescape_edit: Edit/create events form.
 * - /timescape_delete: Delete an event.
*/
function Timescape_menu() {
  $items = array();
  $items['admin/config/content/timescape'] = 
    array('title' => 'Timescape',
	  'description' => 'Administration page for the Timescape module.',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('Timescape_admin'),
	  'access arguments' => array('administer Timescape'),
	  'type' => MENU_NORMAL_ITEM,
	  );
	$items['timescape'] = 
		array('page callback' => 'Timescape_view',
		'access arguments' => array('access Timescape'),
		'type' => MENU_CALLBACK,
		);
	$items['timescape/xml'] =
    array('page callback' => 'Timescape_XML',
	  'access arguments' => array('access Timescape'),
	  'type' => MENU_CALLBACK,
	  );
	$items['timescape/json'] =
    array('page callback' => 'Timescape_JSON',
	  'access arguments' => array('access Timescape'),
	  'type' => MENU_CALLBACK,
	  );
	$items['timescape/css'] =
    array('page callback' => 'Timescape_CSS',
	  'access arguments' => array('access Timescape'),
	  'type' => MENU_CALLBACK,
	  );
	$items['timescape/edit'] =
    array('title' => 'Edit Timeline',
    'page callback' => 'Timescape_edit',
	  'access arguments' => array('edit Timescape'),
	  'type' => MENU_CALLBACK,
	  );
	$items['timescape/delete'] =
    array('title' => 'Deleting a timeline event',
    'page callback' => 'drupal_get_form',
		'page arguments' => array('Timescape_delete'),
	  'access arguments' => array('edit Timescape'),
	  'type' => MENU_CALLBACK,
	  );
  return $items;
}

/**
 * Creates the blocks of the Timescape module.
 *
 * Creates the block content for the Timescape module. This module has two 
 * blocks, the timeline block and the timeline event input block.
 * 
 * @return array $blocks
*/
function Timescape_block_info(){
  $blocks = array();
  
  return $blocks;
}

/**
 * Creates the configuration form for the Timescape module blocks.
 *
 * @param string $delta
 *   Which block is being configured. This is a unique identifier for the 
 *   block within the module, defined in hook_block_info().
 *
 * @return array $form
 *   A configuration form, if one is needed for your block beyond the standard 
 *   elements that the block module provides (block title, visibility, etc.).
*/
function Timescape_block_configure($delta = '') {
  $form = array();
  

  return $form; 
}

/**
 * The main Timescape blocks view. There are no blocks right now.
 *
 * @param string $delta
 *   Which block to render. This is a unique identifier for the block within 
 *   the module, defined in Timescape_block_info().
 *
 * @return array $page_content
 *   An array containing the following elements:
 *   - subject: The default localized title of the block. If the block does 
 *     not have a default title, this should be set to NULL.
 *   - content: The content of the block's body. This may be a renderable 
 *     array (preferable) or a string containing rendered HTML content.
*/
function Timescape_block_view($delta = '') {
  $page_content = array('subject' => '',
                        'content' => '',);
  
  if (module_exists('locale')) {
    $languages = language_list();
    // Todo: Implement translations
  }
  return $page_content;
}

/**
 * Page callback for timescape main page
 *
 * The main page of the Timescape module is rendered here, Most of the actual 
 * rendering is made using external functions but this function passes them 
 * to the renderer.
 *
 * @return string $html
 *   String containing the returned html.
*/
function Timescape_view() {
	$page_content  = '';
  $page_content .= '<div id="Timescape">';
	if (user_access('edit Timescape')) {
		$page_content .= '<p style="text-align: right;"><a href="?q=timescape/edit" style="font-size: 18px">+ ADD NEW</a> - Or click on event to edit/delete.</p><h1>';
	}
	/*$page_content .=  '<div id="timelineLegend">
        <div id="timelineCategories">
            <p id="legendCategoryWriting">Writings</p>
            <p id="legendCategoryArt">Visual Art</p>
            <p id="legendCategoryLetter">Correspondence</p>
            <p id="legendCategoryLife">Life</p>
        </div>
        
        <div id="timelineDots">
        	<table>
              <tr>
                <td class="icon"><div id="" class="legendItems startKnown timeline-event-tape tapeLayer0 singleDateEvent" style=" "></div></td>
                <td> <p>Beginning Precisely</p></td>
              </tr>
              <tr>
                <td class="icon"><div id="" class="legendItems endKnown timeline-event-tape tapeLayer0 singleDateEvent" style=""></div></td>
                <td><p>Ending Precisely</p></td>
              </tr>
              <tr>
                <td class="icon"><div id="" class="legendItems endUnknown timeline-event-tape tapeLayer0 " style=""></div></td>
                <td><p>Beginning Approximately</p></td>
              </tr>
              <tr>
                <td class="icon"><div id="" class="legendItems startUnknown timeline-event-tape tapeLayer0 " style=""></div></td>
                <td><p>Ending Approximately</p></td>
              </tr>
              <tr>
                <td class="icon"><div id="" class="legendItems startKnown endKnown between timeline-event-tape tapeLayer1" style="width: 45px; height: 8px; opacity: 1;border:none; border-radius:0"></div></td>
                <td><p>From... To...</p></td>
              </tr>
              <tr>
                <td class="icon"><div id="" class="startKnown endKnown between timeline-event-tape tapeLayer0 singleDateEvent" style="width: 45px; height: 8px; opacity: 1; border:none;"></div></td>
                <td><p>Between... And...</p></td>
              </tr>
            </table>
            <div class="iconWrapper">
            	
            </div>
              
        </div>
    
    </div>';*/
	$page_content .= '<div id="NavText" style="display:none;"><a href="javascript:centerTimeline(1920);">Move to Beginning</a><a href="javascript:centerTimeline(2010);">Move to End</a></div>';
  $page_content .= '<div id="Timescape_timeline"></div>';
  $page_content .= '</div>';
	return $page_content;
}

/**
 * Page callback for timescape_edit. 
 *
 * @param int $id
 *   If supplied the form will be editing the event with $id.
 *
 * @return string $html
 *   String containing the returned html.
*/
function Timescape_edit($id = 0) {
	$pageInput_Render = drupal_get_form('_Timescape_Input', _Timescape_load($id));
	
  $page_content  = '';
  $page_content .= '<div id="Timescape_input">';
  $page_content .= drupal_render($pageInput_Render);
  $page_content .= '</div>';
  return $page_content;
}

function Timescape_admin_paths_alter(&$paths) {
  // Treat all user pages as administrative.
  $paths['timescape/edit'] = TRUE;

}