<?php

// $Id$

/**
 * This file is part of Timescape developed by Wolf Maul for Semandra Inc. 
 * 2014-15 - http://semandra.com.
 * 
 * Timescape is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Timescape is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Timescape.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * Initialize the Timescape, timeline interface.
 *
 * This function loads external resources that are used by the Timescape 
 * module. Mainly it lods the module specific css-files and the Timeline 
 * rendering javascript from Simile.
*/
function Timescape_init() {
  include_once(drupal_get_path('module', 'Timescape') . '/Timescape.inc');
  
  $options = array (
  	'type' => 'external',
	'every_page' => false
  );
  
  drupal_set_title($title = variable_get('ts_page_title', NULL), $output = CHECK_PLAIN);
//TODO -- Only load this javascript and css if on the timeline page??

  // Load Timeline 2.3.0 javascripts
  // Excplicitly load the ajax api to avoid load on the timeline server
drupal_add_js('Timeline_ajax_url="' . drupal_get_path('module', 'Timescape') . '/timeline_simile/timeline_ajax/simile-ajax-api.js";
                 Timeline_urlPrefix="' . drupal_get_path('module', 'Timescape') . '/timeline_simile/timeline_js/";       
                 Timeline_parameters="bundle=true";', 
               array('type' => 'inline',));
	//drupal_add_js('Timeline_urlPrefix="' . drupal_get_path('module', 'Timescape') . '/timeline_simile/timeline_js/";       
//                 Timeline_parameters="bundle=true";', 
 //              array('type' => 'inline',));
// drupal_add_js(drupal_get_path('module', 'Timescape') . '/timeline_simile/timeline_js/timeline-api.js');
// drupal_add_js(drupal_get_path('module', 'Timescape') . '/timeline_simile/timeline_ajax/simile-ajax-api.js');

//drupal_add_js(drupal_get_path('module', 'Timescape') . '/timeline_simile/timeline_js/scripts/platform.js');
//drupal_add_js(drupal_get_path('module', 'Timescape') . '/timeline_simile/timeline_js/scripts/debug.js');
//drupal_add_js(drupal_get_path('module', 'Timescape') . '/timeline_simile/timeline_js/scripts/xmlhttp.js');
//drupal_add_js(drupal_get_path('module', 'Timescape') . '/timeline_simile/timeline_js/scripts/json.js');
//drupal_add_js(drupal_get_path('module', 'Timescape') . '/timeline_simile/timeline_js/scripts/dom.js');
//drupal_add_js(drupal_get_path('module', 'Timescape') . '/timeline_simile/timeline_js/scripts/graphics.js');
//drupal_add_js(drupal_get_path('module', 'Timescape') . '/timeline_simile/timeline_js/scripts/date-time.js');
//drupal_add_js(drupal_get_path('module', 'Timescape') . '/timeline_simile/timeline_js/scripts/string.js');
//drupal_add_js(drupal_get_path('module', 'Timescape') . '/timeline_simile/timeline_js/scripts/html.js');
//drupal_add_js(drupal_get_path('module', 'Timescape') . '/timeline_simile/timeline_js/scripts/data-structure.js');
//drupal_add_js(drupal_get_path('module', 'Timescape') . '/timeline_simile/timeline_js/scripts/units.js');
//drupal_add_js(drupal_get_path('module', 'Timescape') . '/timeline_simile/timeline_js/scripts/ajax.js');
//drupal_add_js(drupal_get_path('module', 'Timescape') . '/timeline_simile/timeline_js/scripts/history.js');
//drupal_add_js(drupal_get_path('module', 'Timescape') . '/timeline_simile/timeline_js/scripts/window-manager.js');
//drupal_add_js(drupal_get_path('module', 'Timescape') . '/timeline_simile/timeline_js/timeline-bundle-min.js');
drupal_add_js(drupal_get_path('module', 'Timescape') . '/js/timeline-api-cust.js'); //Semandra -- cut out ajax loading of css for customization
drupal_add_css(drupal_get_path('module', 'Timescape') . '/timeline_simile/timeline_js/timeline-bundle.css'); //load simile css through Drupal
 drupal_add_css(drupal_get_path('module', 'Timescape') . '/css/timescape-timeline.css'); //load customizations for timeline
 
 drupal_add_css($GLOBALS['base_path']  . 'timescape/css', $options); // Uses the generated CSS page (Timescape.inc - function Timescape_CSS 

 //drupal_add_css(drupal_get_path('module', 'Timescape') . '/css/test.css'); 
 
  // Load datetimepicker functions and css for the input form
  //drupal_add_js(drupal_get_path('module', 'Timescape') . '/anytime/anytimec.js');
  //drupal_add_css(drupal_get_path('module', 'Timescape') . '/anytime/anytimec.css');
  // Load the MultiFile upload scripts
  //drupal_add_js(drupal_get_path('module', 'Timescape') . '/MultiFile/jquery.MultiFile.js');
  // Load the specific timeline we want to use.
  drupal_add_js(drupal_get_path('module', 'Timescape') . '/js/timescape-theme.js');
  drupal_add_js(drupal_get_path('module', 'Timescape') . '/js/timescape-original-painter.js');
  drupal_add_js(drupal_get_path('module', 'Timescape') . '/js/simile-patch.js');
 // drupal_add_css(drupal_get_path('module', 'Timescape') . '/Timescape.css');
  drupal_add_js(drupal_get_path('module', 'Timescape') . '/js/timescape.js');
  // Load http://momentjs.com/ to easily format dates
  drupal_add_js(drupal_get_path('module', 'Timescape') . '/moment.js'); // Assists with date formatting 
  // Initialize the timeline javascript with another javascript function
  drupal_add_js(Timescape_jQuery(), 'inline'); // Adds execution code for on document load + setup/customization variables from admin
  
  //drupal_add_css(Timescape_customCss(), 'inline');
}

/** 
 * Generates a user help page. 
 *
 * Creates a help page for the Timescape module. Explains configuration, usage 
 * and some tips and tricks on what can be done.
 *
 * @param string $path
 *   The router menu path, as defined in Timescape_menu().
 * @param array $arg
 *   An array that corresponds to the return value of the arg() function, for 
 *   modules that want to provide help that is specific to certain values of 
 *   wildcards in $path. For example, you could provide help for the path 
 *   'user/1' by looking for the path 'user/%' and $arg[1] == '1'. This array 
 *   should always be used rather than directly invoking arg(), because your 
 *   hook implementation may be called for other purposes besides building the 
 *   current page's help. Note that depending on which module is invoking 
 *   hook_help, $arg may contain only empty strings. Regardless, $arg[0] to 
 *   $arg[11] will always be set.
 *   
 * @return string
 *   A localized string containing the help text.
*/

/*Currently not working - renders help text on all pages of site, in all views*/

function Timescape_help($path, $arg){
  
/*  $help_output = '<p>' . t("Displays events on a timeline.") . '</p>';
  return $help_output;*/

}

/**
 * Handles module permissions.
 *
 * Defines the permissions that are used by the Timescape module. The 
 * permissions are: 
 * - "access Timescape": Access the timeline and see open information.
 * - "access Timescape private": Private information is intended for 
 *   Authorized Users. If there is no sensitive information on your timeline
 *   disregard this permission.
 * - "administer Timescape": Allows users to administer the Timescape module.
 *
 * @return array 
 *   An array of permission strings. The strings must not be wrapped with the 
 *   t() function, since the string extractor takes care of extracting 
 *   permission names defined in the perm hook for translation.
*/
function Timescape_permission(){
  return array('administer Timescape' => array(
                 'title' => t('Administer Timescape'),
                 'description' => t('Allows a user to administer the timeline 
                                     and general settings of the Timescape 
                                     module.'),
               ),
               'access Timescape' => array(
                 'title' => t('Access Timescape'),
                 'description' => t('Allows users to view the timeline and 
                                     access open information.'),
               ), 
               'edit Timescape' => array(
                 'title' => t('Edit Timescape'),
                 'description' => t('With this permissions a user can add and
                                     remove non-static things from the 
                                     timeline.'),
               ),
              );
}





function data_file_form_submit($form, $form_state) {
    echo "something here" ; // is not being called!
    //$form['backgroundimage']['#file']->status = FILE_STATUS_PERMANENT;
    //file_save($form['backgroundimage']['#file']);
}


/**
 * Creates the administration form for the Timescape module.
 *
 * Creates the administration form for the Timescape module, the form can be 
 * found at /admin/settings/Timescape as defined in Timescape_menu.
 *
 * @return array $form
 *   A drupal form formatted by system_settings_form().
*/
function Timescape_admin($form, &$form_state){
  	$i = 0;
	// Manage timeline categories (display view)
	$ts_categories = array();
	$ts_categoriesList = "<ul>";
	$results = db_select('timescape_event','t')
											 ->distinct()
                       ->fields('t', array('category'))
                       ->execute();
	while ($result = $results->fetchAssoc()) {
		$ts_categories[$result['category']] = $result['category'];
		$ts_categoriesList .= "<li>" . $result['category'] . "</li>";
	}
	$ts_categories['other'] = 'Other';
  	$ts_categoriesList .= "<ul>";
	
	variable_set('ts_categories', $ts_categories);
  
  // ------------ Data Group ----------------
  $form['ts_data_group'] = array(
    '#type' => 'fieldset',
    '#title' => t('Timeline Data'),
	 '#collapsible' => TRUE,
	 '#collapsed' => TRUE,
  );  
//  $form['ts_data_group']['data_source_type'] = array(
//    '#type' => 'radios',
//    '#title' => t('Data Type!'),
//    '#options' => array(
//      'drupal' => t('Drupal content type (default)'),
//      'json' => t('Uploaded file (JSON)'),
//    ),
//    '#default_value' => variable_get('data_source_type', 'drupal'),
//  );
  
 // 	$validators = array(
//  		'file_validate_extensions' => array('txt csv'),
//	);
//  
//   $form['ts_data_group']['data_file'] = array(
//    '#type' => 'managed_file',
//	'#field_suffix' => "<pre>" . $form['data_file'] . "</pre>",
//	//'#field_suffix' => "<pre>" . file_load(12)->fid . "</pre>",
//    '#title' => t('Data file upload'),
//	'#default_value' => '',
//	'#upload_validators' => $validators,
//	'#default_value' => isset($form['data_file']) ? $form['data_file'] : 0,
//    '#description' => t('Upload a file, allowed extensions: csv, txt'),
//  );
  
  //$form['#submit'][] = 'data_file_form_submit';
  
  //Peform temporary file save and validation for uploaded data file
  //$data_file = file_load($form_state['values']['data_file']);
  
/*  // Load the file via file.fid.
  $file = file_load($form_state['values']['data_file']);
  // Change status to permanent.
  $file->status = FILE_STATUS_PERMANENT;
  // Save.
  file_save($file);
  // Record that the module (in this example, user module) is using the file. 
  file_usage_add($file, 'user', 'user', $account->uid); */
  
  
  //$data_file = variable_get('data_file', '');
/*  if($file){
	  print_r($file);
  }*/
  // If everything checks out, then submit this to the database function which will add all the entries
  //$file = file_load($form_state['values']['data_file']);
  
  $form['ts_data_group']['ts_linked_file_path'] = array(
    '#prefix' => '<div><h2></h2><p><a href="timescape/upload">Import Data</a> - Import CSV file and add to timescape</p></div>',
	'#type' => 'textfield',
    '#title' => t('URL link to JSON file'),
	'#description' => t('NOT FULLY FUNCTIONAL -- Optional. Note: Entries will not be editable from the timeline. See <a href="#">JSON format</a>'),
    '#default_value' => variable_get('ts_linked_file_path', ''),
  );
  
  // ----- Timeline Settings Group ----------
  $form['ts_settings_group'] = array(
    '#type' => 'fieldset',
    '#title' => t('Timeline Settings'),
	 '#collapsible' => TRUE,
	 '#collapsed' => TRUE,
  ); 
  
  $form['ts_settings_group']['ts_page_title'] = array(
    '#type' => 'textfield',
	'#size' => '50',
    '#title' => t('Title to show on page (default is "Timescape")'),
	'#default_value' => variable_get('ts_page_title', ''),
  );
  
  $form['ts_settings_group']['ts_tl_width'] = array(
    '#type' => 'textfield',
	'#size' => '50',
    '#title' => t('Width of timeline (default is auto)'),
	'#default_value' => variable_get('ts_tl_width', 'auto'),
	'#description' => t('Width can be in pixels (e.g. 800px) or in percentage (e.g. 90%)'),
  );
  $form['ts_settings_group']['ts_tl_height'] = array(
    '#type' => 'textfield',
	'#size' => '50',
    '#title' => t('Height of timeline (default is auto)'),
	'#default_value' => variable_get('ts_tl_height', '400px'),
	'#description' => t('Height in pixels (e.g. 800px)'),
  );
  
  
  $form['ts_settings_group']['ts_center_year'] = array(
    '#type' => 'textfield',
	'#size' => '10',
    '#title' => t('Center timeline on year  '),
	'#default_value' => variable_get('ts_center_year', ''),
	'#description' => t('Must be a valid date format - e.g. YYYY/MM/DD. Year only (i.e. YYYY) is valid'),
  );
  
  $form['ts_settings_group']['ts_primary_interval'] = array(
    '#type' => 'select',
    '#title' => t('Primary Timeline Interval '),
	'#options' => array(
		'2' => t('Minute'),
		'3' => t('Hour'),
		'4' => t('Day'),
		'5' => t('Week'),
		'6' => t('Month'),
		'7' => t('Year'),
		'8' => t('Decade'),
		'9' => t('Century'),
		'10' => t('Millennium'),	
		),
	'#description' => t('Sets the time intervals for display in primary (top) timeline'),
	'#default_value' => variable_get('ts_primary_interval', "7"),
  );
    $form['ts_settings_group']['ts_secondary_interval'] = array(
    '#type' => 'select',
    '#title' => t('Secondary Timeline Interval '),
	'#options' => array(
		'2' => t('Minute'),
		'3' => t('Hour'),
		'4' => t('Day'),
		'5' => t('Week'),
		'6' => t('Month'),
		'7' => t('Year'),
		'8' => t('Decade'),
		'9' => t('Century'),
		'10' => t('Millennium'),	
		),
	'#default_value' => variable_get('ts_secondary_interval', "8"),
  );
  
   $form['ts_settings_group']['ts_event_paint_direction'] = array(
    '#type' => 'radios',
	'#options' => array(
		'1' => t('Stack from left (default)'),
		'0' => t('Stack from right'),
		),
    '#title' => t('Direction to layout events'),
	'#default_value' => variable_get('ts_event_paint_direction', '0'),
	'#description' => t(''),
  );
  
    $form['ts_settings_group']['ts_primary_height'] = array(
    '#type' => 'textfield',
	'#size' => '10',
    '#title' => t('Height of primary timeline display (percentage of total)  '),
	'#default_value' => variable_get('ts_primary_height', '90'),
	'#description' => t('For proper display the timeline height should total 100% -- e.g. Primary + Secondary = 100%'),
  );
  $form['ts_settings_group']['ts_secondary_height'] = array(
    '#type' => 'textfield',
	'#size' => '10',
    '#title' => t('Height of primary timeline display (percentage of total)  '),
	'#default_value' => variable_get('ts_secondary_height', '10'),
	'#description' => t('For proper display the timeline height should total 100% -- e.g. Primary + Secondary = 100%'),
  );
  
  $form['ts_settings_group']['ts_tape_height'] = array(
    '#type' => 'textfield',
	'#size' => '10',
    '#title' => t('Tape and Dot Height in pixels (e.g. "10") '),
	'#default_value' => variable_get('ts_tape_height', '8'),
  );
  
    // ======================== Timeline Style Group ==========================
  
  $form['ts_style_group'] = array(
    '#type' => 'fieldset',
    '#title' => t('Timeline Styles'),
	 '#collapsible' => TRUE,
	 '#collapsed' => FALSE,
  ); 
  
    $form['ts_style_group']['ts_tl_prm_bg_color'] = array(
    '#type' => 'textfield',
	'#size' => '20',
    '#title' => t('Timeline primary background color (e.g. #ff0000) '),
	'#default_value' => variable_get('ts_tl_prm_bg_color', '#efefef'),
  );
  $form['ts_style_group']['ts_tl_sec_bg_color'] = array(
    '#type' => 'textfield',
	'#size' => '20',
    '#title' => t('Timeline secondary background color (e.g. #ff0000) '),
	'#default_value' => variable_get('ts_tl_sec_bg_color', '#ddd'),
  );
	$form['ts_style_group']['ts_timeline_border'] = array(
    '#type' => 'textfield',
	'#size' => '20',
    '#title' => t('Styles for Timeline Border (e.g. 1px solid #ff0000) '),
	'#default_value' => variable_get('ts_timeline_border', '#aaa'),
  );
  
	
	
		
		// ------------- Event Dot and Bar Styles --------------------
		  
		$form['ts_style_group']['ts_evt_style_table'] = array(
			'#type' => 'fieldset',
			'#title' => t('Event Tape Styles'),
			'#prefix' => '<table><tr><th>Category Name</th><th>Primary Colour</th><th></th><th>Secondary Colour</th><th></th></tr>',
			'#suffix' => '</table>',
			 '#collapsible' => FALSE,
			 '#collapsed' => FALSE,
		  ); 
	
		foreach ($ts_categories as $ts_category){
			$form['ts_style_group']['ts_evt_style_table']['ts_color_p_' . $ts_category] = array(
			//$form['ts_style_group']['ts_evt_style_table'][$i]['ts_color_p'] = array(
			//'#title' => t($category),
			'#prefix' => '<tr><td>' . $ts_category . "</td><td>",
			'#suffix' => '</td><td><div style="height:20px;width:20px;background-color:'. variable_get('ts_color_p_' . $ts_category, '') .'"></div></td>',
			//'#suffix' => '</td><td><div style="height:20px;width:20px;background-color:'. variable_get('ts_color_p') .'"></div></td>',
			'#type' => 'textfield',
			'#size' => '20',
			'#default_value' => variable_get('ts_color_p_' . $ts_category, '#205092'),
			//'#default_value' => variable_get('ts_color_p', ''),
		  );
		  $form['ts_style_group']['ts_evt_style_table']['ts_color_s_' . $ts_category] = array(
			//'#title' => t($category),
			'#prefix' => '<td>',
			'#suffix' => '</td><td><div style="height:20px;width:20px;background-color:'. variable_get('ts_color_s_' . $ts_category, '') .'"></div></td>',
			'#type' => 'textfield',
			'#size' => '20',
			'#default_value' => variable_get('ts_color_s_' . $ts_category, '#A1C0EA'),
		  );
		  $i++;
		}
		
	$form['ts_style_group']['ts_user_styles'] = array(
    '#type' => 'textarea',
	'#rows' => '10',
    '#title' => t('Add custom CSS styles '),
	'#default_value' => variable_get('ts_user_styles', ''),
  );
  
  // ================== Bubble DISPLAY Group =======================
  
  $form['ts_bubble_group'] = array(
    '#type' => 'fieldset',
    '#title' => t('Bubble Display'),
	 '#collapsible' => TRUE,
	 '#collapsed' => TRUE,
  );  
  
  // TODO --- Show Title?
  
  // TODO -- Show Category?
  
  
  $form['ts_bubble_group']['ts_show_all_dates'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display full dates '),
	'#default_value' => variable_get('ts_show_all_dates', true),
  );
  $form['ts_bubble_group']['ts_date_format'] = array(
    '#type' => 'radios',
    '#title' => t('Dateformat '),
	'#options' => array(
		'MDY' => t('Month Day, Year (e.g. May 3rd, 2015)'),
		'ymd' => t('Year-Month-Day (e.g. 2011-08-05)'),
		'dmy' => t('Day/Month/Year (e.g. 04/09/2010)'),
		),
	'#default_value' => variable_get('ts_date_format', true),
  );
  
  $form['ts_bubble_group']['ts_event_date_summary'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show date summary line'),
	'#default_value' => variable_get('ts_event_date_summary', false),
  );
  

	
	
	return system_settings_form($form);
}


/**
 * Upload Data to database
 *
 *	Wrapper form for the multi-step upload process
*/
function Timescape_upload($form, &$form_state) {
 
  // Check to see if anything has been stored.
  if ($form_state['rebuild']) {
    $form_state['input'] = array();
  }
  if (empty($form_state['storage'])) {
    // No step has been set so start with the first.
    $form_state['storage'] = array(
      'step' => 'Timescape_upload_first_form',
    );
  }
 
  // Return the current form
  $function = $form_state['storage']['step'];
  $form = $function($form, $form_state);
  return $form;
}

/**
 * Submit handler for the primary upload form.
 *
 * @see Timescape_upload().
 */
function Timescape_upload_submit($form, &$form_state) {
  
  $values = $form_state['values'];
    
  if (isset($values['back']) && $values['op'] == $values['back']) {
    // Moving back in form.
    $step = $form_state['storage']['step'];
    // Call current step submit handler if it exists to unset step form data.
    if (function_exists($step . '_submit')) {
      $function = $step . '_submit';
      $function($form, $form_state);
    }
    // Remove the last saved step so we use it next.
    $last_step = array_pop($form_state['storage']['steps']);
    $form_state['storage']['step'] = $last_step;
  }
  else {
    // Record step.
    $step = $form_state['storage']['step']; //$step should == Timescape_upload_first_form  ////////////'Undefined index: storage 
    $form_state['storage']['steps'][] = $step;    
    // Call step submit handler if it exists.
    if (function_exists($step . '_submit')) {
      $function = $step . '_submit';
      $function($form, $form_state);
    }
  }
  return;  
}  


/**
 * Step 1 of upload form. Select file.
 *
 * @see Timescape_upload_form().
 */
function Timescape_upload_first_form($form, &$form_state) {
	if(!empty($form_state['storage']))
    $values = $form_state['storage'];  
	  
  $validators = array(
  		'file_validate_extensions' => array('txt csv'),
	);
  
   $form['data_file'] = array(
    '#type' => 'managed_file',
	//'#field_suffix' => "<pre>" . $form['data_file'] . "</pre>",
	//'#field_suffix' => "<pre>" . file_load(1)->fid . "</pre>",
    '#title' => t('Data file upload'),
	'#default_value' => '',
	'#upload_validators' => $validators,
	'#default_value' => isset($form['data_file']) ? $form['data_file'] : 0,
    '#description' => t('Upload a file, allowed extensions: csv, txt'),
  );
  
  $form['upload_submit'] = 
    array('#type' => 'submit',
    '#value' => "Next",
    '#title' => t('Submit.'),
    );
	$form['#submit'][] = 'Timescape_upload_submit';
	
  return $form;
}

/**
 * Submit handler for the first step.
 */

function Timescape_upload_first_form_submit($form, &$form_state) {
	$values = $form_state['values'];
 
  // Save values to the form storage, add the next step function callback
  $form_state['rebuild'] = TRUE;  // This is very important to have!
	
	//drupal_set_message(t('Ok!'));
	//$file = file_load($form_state['values']['data_file']);
	$form_state['storage']['file_info'] = $form_state['values']['data_file'];
	
	 
	 //drupal_set_message(t(print_r($form_state[1])), 'warning');

	
	
	$form_state['storage']['step'] = 'Timescape_upload_second_form';
}

/**
 * Step 2 of upload form: Match field names.
 *
 * @see multiform_primary_form().
 */
function Timescape_upload_second_form($form, &$form_state) {
	
	if ($form_state['storage']['file_info']) {
		drupal_set_message(t("File Upload Successful"));
		
		$db_columns = array('title', 'start_date', 'end_date', 'late_start', 'early_end','duration_event', 'category', 'location','sub_title','description','sub_text','caption','image_URL','link_URL');
		$form_state['storage']['db_col_num'] = sizeof($db_columns);  // TODO -- NEED length of array
		
		$file = file_load($form_state['storage']['file_info']);
		//$filePath = file_create_url($file->uri);
		$filePath = drupal_realpath($file->uri);
		$data = file_get_contents($filePath);
		$csv = array_map('str_getcsv', file($filePath));
		//drupal_set_message(t("First item: " . $csv[0][0]));
		
		$i=0;
		$import_items_list = "";
		foreach($csv[0] as $in_col){
			++$i;
			$import_items_list .= "<p>". $i . ". " . $in_col  . "</p>";
			
		};
			
		$form['ts_data_group'] = array(
			'#type' => 'fieldset',
			'#prefix' => '<h2>Match Data Categories</h2><p>Only fields that are matched will be imported.<table><tr><th>Timescape Categories</th><th>Import Categories</th></tr><tr><td>',
			'#suffix' => '</td><td>' . $import_items_list . '</td></tr></table>',
			 '#collapsible' => FALSE,
			 '#collapsed' => FALSE,
		  ); 
		$x=0;
		foreach($db_columns as $col){
			$manditory = ($col == 'title' || $col == 'start_date') ? TRUE : FALSE;
			$name = "col" . $x;
			$form['ts_data_group'][$name] = array(
				'#title' => t($col),
				'#required' => $manditory,
				'#prefix' => '<div class="ts-list-group">',
				'#suffix' => '</div>',
				'#type' => 'textfield',
				'#size' => '5',
			  );
			$x++;
			};
		
		//create key_map to pass to validation;

//		
	//	$form_state['storage']['key_map'] = $key_map;
		//pass upload data to validation
		//$form_state['storage']['data'] = array();
		$form_state['storage']['data'] = $csv;
			  
		$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Next'),
		 );
		 
		
		
	} else {
		drupal_set_message(t('There seems to have been a problem with accessing uploaded file'), 'warning');
	}
	
	return $form;
	
}

/**
 * Submit handler for the second step.
 *
 * @see Timescape_upload()
 */
function Timescape_upload_second_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $form_state['rebuild'] = TRUE; //Important!
  $csv = $form_state['storage']['data'];
  $num_cols = $form_state['storage']['db_col_num'];
  
 // echo "<pre>";
//  	print_r($values);
//  echo "</pre>";

  // Create the key map that matches columns between timescape database and inport columns
	$key_map = array();
	$i=0;
	for ($i=0; $i < $num_cols; $i++){
		$key_map[$i] = ($values['col'.$i]) ? $values['col'.$i] : NULL;
		//drupal_set_message(t('In the loop...' . $i . '  -  ' . $key_map[$i]));
	}
  
 //   echo "<pre>";
//  	print_r($key_map);
//  echo "</pre>";
  
  
  //----------- Load File ----------------------
  	
	
/*	if ($file != true || $file == array())  {
		drupal_set_message(t('No file'), 'warning');
	}
	if ($file) {
		drupal_set_message(t('I see something'));
		$file = "hello";
		drupal_set_message(t($file->uri));
		drupal_set_message(t($file->fid));
		$filePath = file_create_url($file->uri);
		$filePath = drupal_realpath($file->uri);
		$data = file_get_contents($filePath);
		$csv = array_map('str_getcsv', file($filePath));
		
		drupal_set_message(t("First item: " . $csv[0][1]));
		drupal_render($file->uri);
	}*/
  
  
  //------------Validate the input here------------------
  
  //--------- Create new data array ------------
  $data = array();
	for ($j=1; $j < count($csv); $j++) { //go through each line of data starting -- don't include col header line
		$new = array();
		$input = "";
		for ($k=0; $k < count($key_map); $k++) { //for each mapping get the data from $csv		
			if ($key_map[$k]){ //if it is a mapped value then process			
				//$input = ($csv[$j][$key_map[$k]-1] && $k > 0 && $k < 5 ) ? strtotime($csv[$j][$key_map[$k]-1]) : NULL;
				if ($k > 0 && $k < 5 ){     //If this is a date input then convert string to epoch time
					//$input = strtotime($csv[$j][$key_map[$k]-1]);
					$input = ($csv[$j][$key_map[$k]-1]) ? strtotime($csv[$j][$key_map[$k]-1]) : NULL;
				} else {
					$input = $csv[$j][$key_map[$k]-1];
				}
			}else{
				if ($k > 0 && $k < 5) {
					$input = NULL;
				}
				elseif($k === 5) {
					$input = 0;
				}else{
					$input = "";
				}
			}
			array_push ($new, $input);
		}
		global $user;
		array_push ($new, $user->name, time());
		array_push ($data, $new);
	}
	
/*	echo "<pre>";
  print_r($data);
 // print_r($values);
  echo "</pre>";*/
	 //========= Validate data fields & add defaults ============
	// Cycle through the data and validate that matchings are proper format 
	// Minimum required: title, start (all other fields can be blank)
	// Date fields (start_date, end_date, late_start, early_end) need to be proper format for proper import
	$ind = 1;
	$no_errors = true;
	$load_message = "";
	foreach ($data as $event){
		if ($event[0] == NULL) {
			$load_message .= "There is a missing event title (manditory field) on line : "  . $ind . "<br>";
			$no_errors = false;
		}
		if ($event[1] == NULL) {
			$load_message .= "There is a missing start date (manditory field) on line : "  . $ind . "<br> The string must be in date format (dd-mm-yyyy or yyyy-mm-dd or Jan 13 2014 or 13 January 2014).<br><br>";
			$no_errors = false;
		}
		$ind++; 
	}; 
  	if ($no_errors) { 
		$form_state['storage']['step'] = 'Timescape_upload_third_form';
		$form_state['storage']['data'] = $data;
		
	}
	else {
		drupal_set_message($load_message, 'warning');
	}
}

/**
 * Step 3 of upload form: Match field names.
 *
 * @see Timescape_upload().
 */
function Timescape_upload_third_form($form, &$form_state) {
	drupal_set_message(t('Import data verified'));
	
	$form['ts_save_group'] = array(
			'#type' => 'fieldset',
			'#prefix' => '<h2>Submit to Database</h2>',
			//'#suffix' => '',
			 '#collapsible' => FALSE,
			 '#collapsed' => FALSE,
		  );
	$active = array(0 => t('ADD new uploaded events to Timescape dataset (Default)'), 1 => t('REPLACE all existing data set with uploaded data'));  
	$form['ts_save_group']['add_type'] = array(
				'#type' => 'radios',
				'#title' => t('Select upload'),
				'#required' => TRUE,
				'#default_value' => isset($node->active) ? $node->active : 0,
				'#prefix' => '<div class="ts-list-group">',
				'#suffix' => '</div>',
				'#options' => $active,
    '#description' => t('Careful: Replacing the current data set will delete any information in the timescape table. This cannot be undone.'),
				);
				
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
		 );

	return $form;
}

/**
 * Submit handler for the third step.
 * @see Timescape_upload()
 */
function Timescape_upload_third_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $form_state['rebuild'] = TRUE; //Important!
  $form_state['rebuild'] = FALSE; //Important!
  $data = $form_state['storage']['data'];
  
/*  echo "<pre>";
  print_r($data);
 // print_r($values);
  echo "</pre>";*/
  //drupal_set_message(t('Import data verified'));
  //------ processing to add data into Timescape database table -----------
  
  
  // If it is REPLACE current databae then... first clear the table
  
  if ($values['add_type'] == 1) {
	   drupal_set_message(t('New data has replaced existing data'));
	   $result = db_truncate('timescape_event')->execute();
  } else {
	  drupal_set_message(t('New data added to Timescape'));
  }
  
  //ADD new values to database 
  
//  $trn = db_transaction();
  global $user;
  
   $fields = array('title', 'start_date', 'end_date', 'late_start', 'early_end','duration_event','category','location','sub_title','description','sub_text','caption','image_URL','link_URL','created_by','created_at');
  
	$query = db_insert('timescape_event')->fields($fields);
	foreach ($data as $record) {
	  $query->values($record);
	}
	$query->execute();
  

  // If errors occured, Alert the user....
  
  
  // If no errors, show finish screen (options to go back to admin and show message)
  
  	//$form_state['storage']['data'] = NULL;
 	//$form_state['storage']['step'] = 'Timescape_admin';
	
	$form_state['redirect'] = 'admin/config/content/timescape';
	
//  echo "<pre>";
//  print_r($form_state);
//  echo "</pre>";
  // Clear storage values 

}
	

/**
 * Creates the Timescape paths and menu items.
 *
 * Defines paths to Timescape pages and defines Timescape menu items. The 
 * items that are defined are:
 * - admin/config/content/timescape: This is the administration page
 * - /timescape: This is the XML-generation hook
 * - /timescape_edit: Edit/create events form.
 * - /timescape_delete: Delete an event.
*/
function Timescape_menu() {
  $items = array();
  $items['admin/config/content/timescape'] = 
    array('title' => 'Timescape Settings',
	  'description' => 'Administration page for the Timescape module.',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('Timescape_admin'),
	  'access arguments' => array('administer Timescape'),
	  'type' => MENU_NORMAL_ITEM,
	  );
	$items['admin/config/content/timescape/upload'] = 
    array('title' => 'Timescape Upload Data',
	  'description' => 'Upload page for the Timescape module.',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('Timescape_upload'),
	  'access arguments' => array('administer Timescape'),
	  'type' => MENU_NORMAL_ITEM,
	  );
	$items['timescape'] = 
		array('page callback' => 'Timescape_view',
		'access arguments' => array('access Timescape'),
		'type' => MENU_NORMAL_ITEM,
		);
	$items['timescape/xml'] =
    array('page callback' => 'Timescape_XML',
	  'access arguments' => array('access Timescape'),
	  'type' => MENU_CALLBACK,
	  );
	$items['timescape/json'] =
    array('page callback' => 'Timescape_JSON',
	  'access arguments' => array('access Timescape'),
	  'type' => MENU_CALLBACK,
	  );
	$items['timescape/css'] =
    array('page callback' => 'Timescape_CSS',
	  'access arguments' => array('access Timescape'),
	  'type' => MENU_CALLBACK,
	  );
	$items['timescape/edit'] =
    array('title' => 'Edit Timeline',
    'page callback' => 'Timescape_edit',
	  'access arguments' => array('edit Timescape'),
	  'type' => MENU_CALLBACK,
	  );
	$items['timescape/delete'] =
    array('title' => 'Deleting a timeline event',
    'page callback' => 'drupal_get_form',
		'page arguments' => array('Timescape_delete'),
	  'access arguments' => array('edit Timescape'),
	  'type' => MENU_CALLBACK,
	  );
  return $items;
}

/**
 * Creates the blocks of the Timescape module.
 *
 * Creates the block content for the Timescape module. This module has two 
 * blocks, the timeline block and the timeline event input block.
 * 
 * @return array $blocks
*/
function Timescape_block_info(){
  $blocks = array();
  
  return $blocks;
}

/**
 * Creates the configuration form for the Timescape module blocks.
 *
 * @param string $delta
 *   Which block is being configured. This is a unique identifier for the 
 *   block within the module, defined in hook_block_info().
 *
 * @return array $form
 *   A configuration form, if one is needed for your block beyond the standard 
 *   elements that the block module provides (block title, visibility, etc.).
*/
function Timescape_block_configure($delta = '') {
  $form = array();
  

  return $form; 
}

/**
 * The main Timescape blocks view. There are no blocks right now.
 *
 * @param string $delta
 *   Which block to render. This is a unique identifier for the block within 
 *   the module, defined in Timescape_block_info().
 *
 * @return array $page_content
 *   An array containing the following elements:
 *   - subject: The default localized title of the block. If the block does 
 *     not have a default title, this should be set to NULL.
 *   - content: The content of the block's body. This may be a renderable 
 *     array (preferable) or a string containing rendered HTML content.
*/
function Timescape_block_view($delta = '') {
  $page_content = array('subject' => '',
                        'content' => '',);
  
  if (module_exists('locale')) {
    $languages = language_list();
    // Todo: Implement translations
  }
  return $page_content;
}

/**
 * Page callback for timescape main page
 *
 * The main page of the Timescape module is rendered here, Most of the actual 
 * rendering is made using external functions but this function passes them 
 * to the renderer.
 *
 * @return string $html
 *   String containing the returned html.
*/
function Timescape_view() {
	$page_content  = '';
  $page_content .= '<div id="Timescape">';
	if (user_access('edit Timescape')) {
		$page_content .= '<p style="text-align: right;"><a href="?q=timescape/edit" style="font-size: 18px">+ ADD NEW</a> - Or click on event to edit/delete.</p>';
	}
	/*$page_content .=  '<div id="timelineLegend">
        <div id="timelineCategories">
            <p id="legendCategoryWriting">Writings</p>
            <p id="legendCategoryArt">Visual Art</p>
            <p id="legendCategoryLetter">Correspondence</p>
            <p id="legendCategoryLife">Life</p>
        </div>
        
        <div id="timelineDots">
        	<table>
              <tr>
                <td class="icon"><div id="" class="legendItems startKnown timeline-event-tape tapeLayer0 singleDateEvent" style=" "></div></td>
                <td> <p>Beginning Precisely</p></td>
              </tr>
              <tr>
                <td class="icon"><div id="" class="legendItems endKnown timeline-event-tape tapeLayer0 singleDateEvent" style=""></div></td>
                <td><p>Ending Precisely</p></td>
              </tr>
              <tr>
                <td class="icon"><div id="" class="legendItems endUnknown timeline-event-tape tapeLayer0 " style=""></div></td>
                <td><p>Beginning Approximately</p></td>
              </tr>
              <tr>
                <td class="icon"><div id="" class="legendItems startUnknown timeline-event-tape tapeLayer0 " style=""></div></td>
                <td><p>Ending Approximately</p></td>
              </tr>
              <tr>
                <td class="icon"><div id="" class="legendItems startKnown endKnown between timeline-event-tape tapeLayer1" style="width: 45px; height: 8px; opacity: 1;border:none; border-radius:0"></div></td>
                <td><p>From... To...</p></td>
              </tr>
              <tr>
                <td class="icon"><div id="" class="startKnown endKnown between timeline-event-tape tapeLayer0 singleDateEvent" style="width: 45px; height: 8px; opacity: 1; border:none;"></div></td>
                <td><p>Between... And...</p></td>
              </tr>
            </table>
            <div class="iconWrapper">
            	
            </div>
              
        </div>
    
    </div>';*/
	$page_content .= '<div id="NavText" style="display:none;"><a href="javascript:centerTimeline(1920);">Move to Beginning</a><a href="javascript:centerTimeline(2010);">Move to End</a></div>';
  $page_content .= '<div id="Timescape_timeline"></div>';
  $page_content .= '</div>';
	return $page_content;
}

/**
 * Page callback for timescape_edit. 
 *
 * @param int $id
 *   If supplied the form will be editing the event with $id.
 *
 * @return string $html
 *   String containing the returned html.
*/
function Timescape_edit($id = 0) {
	$pageInput_Render = drupal_get_form('_Timescape_Input', _Timescape_load($id));
	
  $page_content  = '';
  $page_content .= '<div id="Timescape_input">';
  $page_content .= drupal_render($pageInput_Render);
  $page_content .= '</div>';
  return $page_content;
}

function Timescape_admin_paths_alter(&$paths) {
  // Treat all user pages as administrative.
  $paths['timescape/edit'] = TRUE;

}

